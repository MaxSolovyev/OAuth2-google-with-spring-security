## DataSource settings: set here your own configurations for the database
## connection. In this example we have "netgloo_blog" as database name and
## "root" as username and password.
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url = jdbc:mysql://localhost:3306/crud
#spring.datasource.username = root
#spring.datasource.password = root
#
## Show or not log for each sql query
#spring.jpa.show-sql = true
#
## Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto= update
#
## Use spring.jpa.properties.* for Hibernate native properties (the prefix is
## stripped before adding them to the entity manager)
#
## The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
#
#

#spring.security.oauth2.client.registration.google.client-id=583603165908-33h58okrh4h2pj814ql07qq55uumqrif.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.client-secret=v1t1ilaez5iKda8KpfhsqbGb

#security.oauth2.client.clientId=583603165908-33h58okrh4h2pj814ql07qq55uumqrif.apps.googleusercontent.com
#security.oauth2.client.clientSecret=v1t1ilaez5iKda8KpfhsqbGb
#security.oauth2.client.clientAuthenticationScheme=form
#security.oauth2.client.scope=openid,email,profile
#security.oauth2.client.accessTokenUri=https://www.googleapis.com/oauth2/v4/token
#security.oauth2.client.userAuthorizationUri=https://accounts.google.com/o/oauth2/v2/auth
#security.oauth2.resource.userInfoUri=https://www.googleapis.com/oauth2/v3/userinfo
#security.oauth2.resource.preferTokenInfo=true

# Google
spring.security.oauth2.client.registration.google.client-id=583603165908-33h58okrh4h2pj814ql07qq55uumqrif.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=v1t1ilaez5iKda8KpfhsqbGb
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.client-authentication-method=form
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://www.googleapis.com/oauth2/v4/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub


server.port = 8090